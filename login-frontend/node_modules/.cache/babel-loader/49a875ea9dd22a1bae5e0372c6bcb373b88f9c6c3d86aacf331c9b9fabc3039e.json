{"ast":null,"code":"var _jsxFileName = \"/Users/davidmar/100-sqstest/audio_client_server/login-frontend/frontend/src/Login.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport axios from 'axios'; // Used for making HTTP requests\nimport React, { useState } from 'react'; // Importing React and the useState hook\nimport { setUserSession } from './service/AuthService'; // Function to set user session\nimport { useNavigate } from 'react-router-dom'; // Hook for navigating programmatically\n\n// API URL for the login endpoint\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loginAPIUrl = 'https://2noo61wwr8.execute-api.us-east-2.amazonaws.com/staging/login';\n\n// Login component\nconst Login = props => {\n  _s();\n  // Hook for navigation\n  const navigate = useNavigate();\n\n  // Log to indicate that the Login component has been rendered\n  console.log(\"Login component rendered\", props);\n\n  // State for username, password, and error message\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // Function to handle form submission\n  const submitHandler = event => {\n    // Prevent default form submission behavior\n    console.log(\"Submit handler triggered\");\n    event.preventDefault();\n\n    // Check if username or password fields are empty and set an error message\n    if (username.trim() === '' || password.trim() === '') {\n      setErrorMessage('Both username and password are required');\n      return;\n    }\n\n    // Reset error message\n    setErrorMessage(null);\n\n    // HTTP request configuration, including API key header\n    // Note: It's better to store API keys in environment variables instead of in code\n    const requestConfig = {\n      headers: {\n        'x-api-key': 'v9aez83lFu3PZMQrCQRqOaKGhCkxDwOq5pYaLuJy'\n      }\n    };\n\n    // Request body with username and password\n    const requestBody = {\n      username: username,\n      password: password\n    };\n\n    // Log indicating the start of an API call\n    console.log(\"Preparing to make API call\", {\n      username,\n      password\n    });\n\n    // Making a POST request to the login API\n    axios.post(loginAPIUrl, requestBody, requestConfig).then(response => {\n      // Success path: log response and navigate to premium content\n      console.log(\"Login successful, response received\", response);\n      setUserSession(response.data.user, response.data.token);\n      navigate('/premium-content');\n    }).catch(error => {\n      // Error handling\n      console.log(\"Error in login\", error);\n      if (error.response) {\n        // Case when the server responds with an error status outside the 2xx range\n        if (error.response.status === 401 || error.response.status === 403) {\n          // Authentication or authorization error\n          setErrorMessage(error.response.data.message);\n        } else {\n          // General server error (e.g., server down)\n          setErrorMessage('sorry... the backend server is down. please try again later!!');\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        setErrorMessage('No response from server. Check your network connection.');\n      } else {\n        // An error occurred in setting up the request\n        setErrorMessage('Error setting up the request.');\n      }\n    });\n  };\n\n  // Component rendering: form for login with username and password inputs\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), \"username: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: event => setUsername(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 113\n      }, this), \"password: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: event => setPassword(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 117\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n};\n_s(Login, \"XE92pAMxyFfwOMsRNNObZ9cHNnI=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","React","useState","setUserSession","useNavigate","jsxDEV","_jsxDEV","loginAPIUrl","Login","props","_s","navigate","console","log","username","setUsername","password","setPassword","errorMessage","setErrorMessage","submitHandler","event","preventDefault","trim","requestConfig","headers","requestBody","post","then","response","data","user","token","catch","error","status","message","request","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","className","_c","$RefreshReg$"],"sources":["/Users/davidmar/100-sqstest/audio_client_server/login-frontend/frontend/src/Login.js"],"sourcesContent":["// Import necessary libraries and components\nimport axios from 'axios'; // Used for making HTTP requests\nimport React, { useState } from 'react'; // Importing React and the useState hook\nimport { setUserSession } from './service/AuthService'; // Function to set user session\nimport { useNavigate } from 'react-router-dom'; // Hook for navigating programmatically\n\n// API URL for the login endpoint\nconst loginAPIUrl = 'https://2noo61wwr8.execute-api.us-east-2.amazonaws.com/staging/login';\n\n// Login component\nconst Login = (props) => {\n   // Hook for navigation\n   const navigate = useNavigate();\n\n   // Log to indicate that the Login component has been rendered\n   console.log(\"Login component rendered\", props);\n\n   // State for username, password, and error message\n   const [username, setUsername] = useState('');\n   const [password, setPassword] = useState('');\n   const [errorMessage, setErrorMessage] = useState(null);\n\n   // Function to handle form submission\n   const submitHandler = (event) => {\n      // Prevent default form submission behavior\n      console.log(\"Submit handler triggered\");\n      event.preventDefault();\n\n      // Check if username or password fields are empty and set an error message\n      if (username.trim() === '' || password.trim() === '') {\n         setErrorMessage('Both username and password are required');\n         return;\n      }\n\n      // Reset error message\n      setErrorMessage(null);\n\n      // HTTP request configuration, including API key header\n      // Note: It's better to store API keys in environment variables instead of in code\n      const requestConfig = {\n         headers: {\n           'x-api-key': 'v9aez83lFu3PZMQrCQRqOaKGhCkxDwOq5pYaLuJy'\n         }\n      };\n\n      // Request body with username and password\n      const requestBody = {\n         username: username,\n         password: password\n      };\n\n      // Log indicating the start of an API call\n      console.log(\"Preparing to make API call\", {username, password});\n\n      // Making a POST request to the login API\n      axios.post(loginAPIUrl, requestBody, requestConfig).then((response) => {\n         // Success path: log response and navigate to premium content\n         console.log(\"Login successful, response received\", response);\n         setUserSession(response.data.user, response.data.token);\n         navigate('/premium-content');\n      }).catch((error) => {\n         // Error handling\n         console.log(\"Error in login\", error);\n         if (error.response) {\n            // Case when the server responds with an error status outside the 2xx range\n            if (error.response.status === 401 || error.response.status === 403){\n               // Authentication or authorization error\n               setErrorMessage(error.response.data.message);\n            } else {\n               // General server error (e.g., server down)\n               setErrorMessage('sorry... the backend server is down. please try again later!!');\n            }\n         } else if (error.request) {\n            // The request was made but no response was received\n            setErrorMessage('No response from server. Check your network connection.');\n         } else {\n            // An error occurred in setting up the request\n            setErrorMessage('Error setting up the request.');\n         }\n      });   \n   };\n\n   // Component rendering: form for login with username and password inputs\n   return (\n      <div>\n         <form onSubmit={submitHandler}>\n            <h5>Login</h5>\n            username: <input type=\"text\" value={username} onChange={event => setUsername(event.target.value)} /><br></br>\n            password: <input type=\"password\" value={password} onChange={event => setPassword(event.target.value)} /><br></br>\n            <input type=\"submit\" value=\"Login\" />\n         </form> \n         {errorMessage && <p className=\"message\">{errorMessage}</p>}\n      </div>\n   );\n}\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}